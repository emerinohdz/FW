#
# FW lang functions.
# 
# These functions are used to abstract and simplify the creation 
# of new rules. 
#
# ALIASES define functions that are used to simplify or abstract
# the creation of rules, they can be used anywhere in the rule
# (if the alias allows it) but need an ACTION in the end.
#
# ACTIONS define functions that can only be used at the end of
# a rule.
#


# Reserved IPS to be used for anti spoof protection
@def $RESERVED_IPS = `cat /etc/ferm.d/RESERVED_IPS`; 


#########################################################################
# ALIASES
#########################################################################

# Abstract insertion of rule into table filter chain INPUT
@def &INPUT($dev) = table filter chain INPUT @if @ne($dev, any) interface $dev;

# Abstract saddr
@def &FROM($saddr) = saddr $saddr;

# Abstract daddr
@def &TO($daddr) = daddr $daddr;


#########################################################################
# ACTIONS
#########################################################################

# Define policy to be used in $chain by default. 
# Also, enable connection tracking in the specified chain.
@def &POLICY($chain, $default) = {
	table filter chain $chain {
		policy $default;

		@if @ne($default, ACCEPT) &CONN_TRACK();
	}
}

# Connection tracking
#
# This function provides connection tracking for the table and
# chain that uses includes it.
@def &CONN_TRACK() = {
	mod state state INVALID DROP;
	mod state state (ESTABLISHED RELATED) ACCEPT;
}

# ACCEPT TRAFFIC IN PROTOCOL $proto AND SPORT $sport DPORT $dport
# $dport can be: (any, safe, NUMBER)
#
# where:
#	any = any port
#	safe = safe ports (1024-65535)
#	NUMBER = a number or range of numbers
@def &ACCEPT($proto, $sport, $dport) = {
	@if @eq($sport, $dport) @if @eq($dport, any) proto $proto ACCEPT;

	# port can be anything
	@else @if @eq($sport, any) proto $proto dport $dport ACCEPT;
	@else @if @eq($dport, any) proto $proto sport $sport ACCEPT;

	# port can only be > 1024
	@else @if @eq($sport, safe) proto $proto dport $dport sport 1024:65535 ACCEPT;
	@else @if @eq($dport, safe) proto $proto sport $sport dport 1024:65535 ACCEPT;

	# Destination port is $dport
	@else proto $proto sport $sport dport $dport ACCEPT;
}

# Mark $network as trusted.
@def &TRUST($network) = {
	saddr $network daddr $network ACCEPT;
}

# Set some rules for spoof protection.
@def &ANTI_SPOOFING() = {
	@subchain { saddr $RESERVED_IPS DROP; }
}

# Reject ICMP request with the specified $response
@def &ICMP_REJECT($response) = {
	proto icmp REJECT reject-with $response; 
}

# Add some simple protection to the interface where this action
# gets called.
#
# Everything here gets logged.
@def &PROTECT() = {
	# drop new packets without SYN
	proto tcp ! syn mod state state NEW LOG;
	proto tcp ! syn mod state state NEW DROP;

	# drop fragmented packets
	fragment LOG;
	fragment DROP;

	# drop XMAS packets
	proto tcp tcp-flags ALL ALL LOG;
	proto tcp tcp-flags ALL ALL DROP;

	# drop NULL packets
	proto tcp tcp-flags ALL NONE LOG;
	proto tcp tcp-flags ALL NONE DROP;
}

